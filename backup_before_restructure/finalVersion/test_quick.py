#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\n快速测试脚本\n\"\"\"\nimport sys\nfrom pathlib import Path\n\n# 添加路径\nproject_root = Path(__file__).parent\nsys.path.append(str(project_root))\nsys.path.append(str(project_root.parent))\n\ndef test_data_loading():\n    \"\"\"测试数据加载\"\"\"\n    print(\"📂 测试数据加载...\")\n    \n    try:\n        from src.utils.data_loader import DataLoader\n        \n        loader = DataLoader()\n        \n        # 列出可用数据集\n        datasets = loader.list_available_datasets()\n        print(f\"   可用数据集: {datasets}\")\n        \n        # 测试加载 brazil-airports\n        G, (X, Y) = loader.load_dataset('brazil-airports')\n        print(f\"   ✅ 数据加载成功: {G.number_of_nodes()} 节点, {len(X)} 标签\")\n        \n        return True\n        \n    except Exception as e:\n        print(f\"   ❌ 数据加载失败: {e}\")\n        return False\n\ndef test_original_algorithm():\n    \"\"\"测试原始算法\"\"\"\n    print(\"\\n🔧 测试原始算法...\")\n    \n    try:\n        from src.utils.data_loader import DataLoader\n        from src.algorithms.original_struc2vec import OriginalStruc2Vec\n        \n        # 加载数据\n        loader = DataLoader()\n        G, (X, Y) = loader.load_dataset('brazil-airports')\n        \n        # 创建算法（使用较小参数加快测试）\n        algorithm = OriginalStruc2Vec(\n            G, \n            walk_length=20, \n            num_walks=3, \n            embed_size=32, \n            workers=1, \n            iter=1\n        )\n        \n        # 训练\n        algorithm.train()\n        embeddings = algorithm.get_embeddings()\n        \n        print(f\"   ✅ 原始算法测试成功: {len(embeddings)} 个嵌入\")\n        return True\n        \n    except Exception as e:\n        print(f\"   ❌ 原始算法测试失败: {e}\")\n        return False\n\ndef test_evaluator():\n    \"\"\"测试评估器\"\"\"\n    print(\"\\n📊 测试评估器...\")\n    \n    try:\n        from src.utils.evaluator import Evaluator\n        \n        evaluator = Evaluator(classifiers=['logistic'])\n        print(f\"   ✅ 评估器创建成功\")\n        return True\n        \n    except Exception as e:\n        print(f\"   ❌ 评估器测试失败: {e}\")\n        return False\n\ndef main():\n    \"\"\"主测试函数\"\"\"\n    print(\"=\" * 60)\n    print(\"🧪 Final Version 快速测试\")\n    print(\"=\" * 60)\n    \n    tests = [\n        (\"数据加载\", test_data_loading),\n        (\"评估器\", test_evaluator),\n        (\"原始算法\", test_original_algorithm)\n    ]\n    \n    passed = 0\n    total = len(tests)\n    \n    for name, test_func in tests:\n        try:\n            if test_func():\n                passed += 1\n        except Exception as e:\n            print(f\"   ❌ {name} 测试异常: {e}\")\n    \n    print(f\"\\n\" + \"=\" * 60)\n    print(f\"📋 测试结果: {passed}/{total} 通过\")\n    \n    if passed == total:\n        print(\"✅ 所有测试通过! 项目结构正常\")\n        print(\"\\n🚀 可以运行: python scripts/run_comparison.py --dataset brazil-airports\")\n    else:\n        print(\"❌ 部分测试失败，请检查项目配置\")\n    \n    return passed == total\n\nif __name__ == \"__main__\":\n    success = main()\n    exit(0 if success else 1)